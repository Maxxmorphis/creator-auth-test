// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "mongodb"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@map("creator_account")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("creator_session")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  address       String?         @unique
  project       Project?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  perks         Perk[]
  twitter       TwitterProfile?
  discord       DiscordProfile?

  @@map("creator_user")
}

type TwitterProfile {
  id       String
  name     String?
  username String?
  image    String?
}

type DiscordProfile {
  id       String
  name     String?
  username String?
  image    String?
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("creator_verification_token")
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @db.ObjectId
  name        String
  description String
  link        String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  perk        Perk[]

  @@map("creator_project")
}

model Perk {
  id                     String                  @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  description            String
  type                   PerkType
  featuredImageUrl       String?
  blockchain             PerkBlockchain
  status                 PerkStatus
  startDate              DateTime
  endDate                DateTime
  project                Project                 @relation(fields: [projectId], references: [id])
  projectId              String                  @db.ObjectId
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  userId                 String                  @db.ObjectId
  user                   User                    @relation(fields: [userId], references: [id])
  allowList              AllowList?
  generic                Generic?
  tokenHolderRequirement TokenHolderRequirement?
  twitterRequirement     TwitterRequirement[]
  walletInteraction      WalletInteraction[]
  Claimed                Claimed[]

  @@map("creator_perk")
}

enum PerkStatus {
  Draft
  Published
}

type AllowList {
  spots       Int
  spotsUsed   Int?    @default(0)
  price       Float?
  priceSymbol String?
  totalSupply Int?
}

type Generic {
  link String
  type GenericPerkType
}

type TokenHolderRequirement {
  mustHoldTokenContracts String[]
  tokenRequirement       TokenRequirement[]
}

type TokenRequirement {
  tokenType       TokenType
  blockchain      TokenRequirementBlockChain
  contractAddress String
  mustHoldAmount  BigInt
  tokenSymbol     String?
  tokenName       String?
  logoUrl         String?
}

enum TokenType {
  Token
  NFT
}

enum PerkType {
  Allowlist
  Generic
}

enum PerkBlockchain {
  Ethereum
  Polygon
  Solana
  Sui
  BSC
}

enum TokenRequirementBlockChain {
  Ethereum
  Polygon
}

type TwitterRequirement {
  type  TwitterRequirementType
  value String
}

enum TwitterRequirementType {
  Follow
  Like
  Reply
  Retweet
  JoinSpace
}

type WalletInteraction {
  blockchain            WalletInteractionBlockchain
  contract              String
  interaction           String
  interactionCount      Int
  interactionPeriod     Int
  interactionPeriodType InteractionPeriodType
}

enum WalletInteractionBlockchain {
  Ethereum
  Polygon
}

enum InteractionPeriodType {
  Day
  Month
  Year
}

enum GenericPerkType {
  Airdrop
  Allowlist
  Quest
  Discount
  Merch
  Other
}

model Claimed {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  walletAddress String
  twitterName   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  perkId        String   @db.ObjectId
  perk          Perk     @relation(fields: [perkId], references: [id])

  @@map("creator_claimed")
}
