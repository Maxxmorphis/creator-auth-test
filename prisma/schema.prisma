// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@map("creator_accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("creator_sessions")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  address       String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  projects      Project[]
  twitter       TwitterProfile?
  discord       DiscordProfile?
  role          Role            @default(User)

  @@map("creator_users")
}

model AdminWallet {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  address String @unique

  @@map("creator_admin_wallets")
}

enum Role {
  User
  Admin
}

type TwitterProfile {
  id       String
  name     String?
  username String?
  image    String?
}

type DiscordProfile {
  id       String
  name     String?
  username String?
  image    String?
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("creator_verification_tokens")
}

model Project {
  id             String              @id @default(auto()) @map("_id") @db.ObjectId
  blockchains    ProjectBlockchain[] @default([])
  name           String
  logoUrl        String
  description    String
  website        String?
  twitter        String?
  discord        String?
  slug           String              @unique
  bannerImage    String
  categories     Category[]
  previewImages  String[]
  projectStage   ProjectStage
  status         ProjectStatus
  rejectedReason String?
  isFeatured     Boolean             @default(false)
  viewCount      Int                 @default(0)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  userId         String              @db.ObjectId
  user           User                @relation(fields: [userId], references: [id])

  @@map("creator_projects")
}

enum ProjectStatus {
  Draft
  InReview
  Published
  Rejected
}

enum ProjectStage {
  Mainnet
  InDevelopment
}

enum Category {
  NFT
  Game
  DeFi
  Tooling
  Dao
  Infrastructure
  Social
  Others
  SmartNFT
  Bot
}

enum ProjectBlockchain {
  Ethereum
  Polygon
  Solana
  Sui
  BSC
}
